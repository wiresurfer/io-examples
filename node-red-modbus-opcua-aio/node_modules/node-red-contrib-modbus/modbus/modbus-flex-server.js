"use strict";module.exports=function(u){require("source-map-support").install();var d=require("modbus-serial"),c=require("./core/modbus-server-core"),a=require("./modbus-basics"),l=require("debug")("contribModbus:flex:server");try{u.nodes.registerType("modbus-flex-server",function(e){u.nodes.createNode(this,e);var r=require("vm2"),s=r.VM,t=r.VMScript;this.name=e.name,this.logEnabled=e.logEnabled,this.serverAddress=e.serverAddress||"0.0.0.0",this.serverPort=parseInt(e.serverPort),this.responseDelay=parseInt(e.responseDelay),this.delayUnit=e.delayUnit,this.unitId=parseInt(e.unitId)||1,this.minAddress=parseInt(e.minAddress)||0,this.splitAddress=parseInt(e.splitAddress)||1e4,this.showErrors=e.showErrors,this.funcGetCoil=new t(e.funcGetCoil).compile(),this.funcGetDiscreteInput=new t(e.funcGetDiscreteInput).compile(),this.funcGetInputRegister=new t(e.funcGetInputRegister).compile(),this.funcGetHoldingRegister=new t(e.funcGetHoldingRegister).compile(),this.funcSetCoil=new t(e.funcSetCoil).compile(),this.funcSetRegister=new t(e.funcSetRegister).compile(),this.internalDebugLog=l,this.verboseLogging=u.settings.verbose;var o=this;o.bufferFactor=c.bufferFactor,o.coilsBufferSize=parseInt(e.coilsBufferSize*c.bufferFactor),o.registersBufferSize=parseInt(e.registersBufferSize*c.bufferFactor),o.coils=Buffer.alloc(o.coilsBufferSize,0),o.registers=Buffer.alloc(o.registersBufferSize,0),o.modbusServer=null,a.setNodeStatusTo("initialized",o),o.vector={};var i=new s({sandbox:{node:o}});function n(e){return[{type:"holding",message:e,payload:o.registers.slice(o.splitAddress*c.bufferFactor)},{type:"coils",message:e,payload:o.coils.slice(0,o.splitAddress*c.bufferFactor)},{type:"input",message:e,payload:o.registers.slice(0,o.splitAddress*c.bufferFactor)},{type:"discrete",message:e,payload:o.coils.slice(o.splitAddress*c.bufferFactor)},{payload:"request",type:"message",message:e}]}i.run("node.vector.getCoil = "+e.funcGetCoil),i.run("node.vector.getDiscreteInput = "+e.funcGetDiscreteInput),i.run("node.vector.getInputRegister = "+e.funcGetInputRegister),i.run("node.vector.getHoldingRegister = "+e.funcGetHoldingRegister),i.run("node.vector.setCoil = "+e.funcSetCoil),i.run("node.vector.setRegister = "+e.funcSetRegister),o.startServer=function(){try{if(null===o.modbusServer){try{o.modbusServer=new d.ServerTCP(o.vector,{host:o.serverAddress,port:o.serverPort,debug:o.logEnabled,unitID:o.unitId})}catch(e){o.error(e,{payload:"server net error -> for port 502 on unix, you have to be a super user"})}o.modbusServer.on("socketError",function(e){l(e.message),o.showErrors&&o.warn(e),a.setNodeStatusTo("error",o),o.modbusServer.close(function(){o.startServer()})}),o.modbusServer._server.on("connection",function(e){l("Modbus Flex Server client connection"),e&&l("Modbus Flex Server client to "+JSON.stringify(e.address())+" from "+e.remoteAddress+" "+e.remotePort),a.setNodeStatusTo("active",o)})}o.showStatusActivities||a.setNodeDefaultStatus(o)}catch(e){l(e.message),o.showErrors&&o.warn(e),a.setNodeStatusTo("error",o)}null!=o.modbusServer?(l("Modbus Flex Server listening on modbus://"+o.serverAddress+":"+o.serverPort),a.setNodeStatusTo("initialized",o)):(l("Modbus Flex Server isn't ready"),a.setNodeStatusTo("error",o))},o.startServer(),o.on("input",function(e){c.isValidMemoryMessage(e)?(c.writeToFlexServerMemory(o,e),1!==e.payload.disableMsgOutput&&o.send(n(e))):(o.showErrors&&o.error("Is Not A Valid Memory Write Message To Server",e),e.payload.disableMsgOutput||o.send(n(e)))}),o.on("close",function(){a.setNodeStatusTo("closed",o),o.modbusServer._server&&o.modbusServer._server.close(),o.modbusServer=null})})}catch(e){l(e.message)}};
//# sourceMappingURL=maps/modbus-flex-server.js.map
