{"version":3,"sources":["core/modbus-client-core.js"],"names":["require","install","de","biancoroyal","modbus","core","client","internalDebug","internalDebugFSM","modbusSerialDebug","XStateFSM","stateLogEnabled","networkErrors","this","id","states","on","INIT","BREAK","STOP","broken","createStateMachineService","ACTIVATE","RECONNECT","reconnecting","createMachine","initial","OPENSERIAL","CONNECT","FAILURE","SWITCH","CLOSE","QUEUE","SEND","READ","WRITE","stopped","NEW","getActualUnitId","node","msg","Number","isInteger","payload","unitid","queueUnitId","parseInt","unit_id","startStateService","toggleMachine","interpret","start","checkUnitId","clientType","getLogFunction","internalDebugLog","EMPTY","activateSendingOnSuccess","cb","cberr","resp","then","err","empty","send","activateSendingOnFailure","sending","readModbusByFunctionCodeOne","address","quantity","coreClient","reading","readModbusByFunctionCodeTwo","readDiscreteInputs","writing","readModbusByFunctionCodeThree","closed","readHoldingRegisters","readModbusByFunctionCodeFour","failed","readInputRegisters","readModbusByFunctionCode","fc","Error","nodeLog","readModbus","queueLog","JSON","stringify","timeout","getTimeout","state","value","clienttype","activateSending","stateService","modbusErrorHandling","writeModbusByFunctionCodeFive","writeCoil","readCoils","length","writeCoils","getID","writeModbusByFunctionCodeSix","writeRegister","writeModbusByFunctionCodeSixteen","writeRegisters","writeModbus","info","bufferCommands","message","setUnitIdFromPayload","setTimeout","writeModbusByFunctionCodeFifteen","tcpHost","tcpPort","setNewSerialNodeSettings","serialPort","serialBaudrate","serialDatabits","serialStopbits","serialParity","serialType","serialConnectionDelay","setNewNodeOptionalSettings","unitId","commandDelay","clientTimeout","reconnectTimeout","setNewNodeSettings","tcpType","connectorType","messagesAllowedStates","module","exports"],"mappings":"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","file":"../../core/modbus-client-core.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019,2020 Klaus Landsdorf (https://bianco-royal.com/)\n All rights reserved.\n node-red-contrib-modbus\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n */\n'use strict'\nrequire('source-map-support').install()\n\nvar de = de || { biancoroyal: { modbus: { core: { client: {} } } } } // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.internalDebug = de.biancoroyal.modbus.core.client.internalDebug || require('debug')('contribModbus:core:client') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.internalDebugFSM = de.biancoroyal.modbus.core.client.internalDebugFSM || require('debug')('contribModbus:core:client:fsm') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.modbusSerialDebug = de.biancoroyal.modbus.core.client.modbusSerialDebug || require('debug')('modbus-serial') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.XStateFSM = de.biancoroyal.modbus.core.client.XStateFSM || require('@xstate/fsm') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.stateLogEnabled = de.biancoroyal.modbus.core.client.stateLogEnabled || false // eslint-disable-line no-use-before-define\n\nde.biancoroyal.modbus.core.client.networkErrors = ['ESOCKETTIMEDOUT', 'ETIMEDOUT', 'ECONNRESET', 'ENETRESET',\n  'ECONNABORTED', 'ECONNREFUSED', 'ENETUNREACH', 'ENOTCONN',\n  'ESHUTDOWN', 'EHOSTDOWN', 'ENETDOWN', 'EWOULDBLOCK', 'EAGAIN', 'EHOSTUNREACH']\n\nde.biancoroyal.modbus.core.client.createStateMachineService = function () {\n  this.stateLogEnabled = false\n\n  // failure is a general gate point in states to jump between states\n  return this.XStateFSM.createMachine({\n    id: 'modbus',\n    initial: 'new',\n    states: {\n      new: {\n        on: { INIT: 'init', BREAK: 'broken', STOP: 'stopped' }\n      },\n      broken: {\n        on: { INIT: 'init', STOP: 'stopped', FAILURE: 'failed', ACTIVATE: 'activated', RECONNECT: 'reconnecting' }\n      },\n      reconnecting: {\n        on: { INIT: 'init', STOP: 'stopped' }\n      },\n      init: {\n        on: { OPENSERIAL: 'opened', CONNECT: 'connected', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' }\n      },\n      opened: {\n        on: { CONNECT: 'connected', BREAK: 'broken', FAILURE: 'failed', CLOSE: 'closed', STOP: 'stopped', SWITCH: 'switch' }\n      },\n      connected: {\n        on: { CLOSE: 'closed', ACTIVATE: 'activated', QUEUE: 'queueing', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' }\n      },\n      activated: {\n        on: {\n          READ: 'reading',\n          WRITE: 'writing',\n          QUEUE: 'queueing',\n          BREAK: 'broken',\n          CLOSE: 'closed',\n          FAILURE: 'failed',\n          STOP: 'stopped',\n          SWITCH: 'switch'\n        }\n      },\n      queueing: {\n        on: {\n          ACTIVATE: 'activated',\n          SEND: 'sending',\n          READ: 'reading',\n          WRITE: 'writing',\n          EMPTY: 'empty',\n          BREAK: 'broken',\n          CLOSE: 'closed',\n          FAILURE: 'failed',\n          STOP: 'stopped',\n          SWITCH: 'switch'\n        }\n      },\n      empty: { on: { QUEUE: 'queueing', BREAK: 'broken', FAILURE: 'failed', CLOSE: 'closed', STOP: 'stopped', SWITCH: 'switch' } },\n      sending: { on: { ACTIVATE: 'activated', READ: 'reading', WRITE: 'writing', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' } },\n      reading: { on: { ACTIVATE: 'activated', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped' } },\n      writing: { on: { ACTIVATE: 'activated', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped' } },\n      closed: { on: { FAILURE: 'failed', BREAK: 'broken', CONNECT: 'connected', RECONNECT: 'reconnecting', INIT: 'init', STOP: 'stopped', SWITCH: 'switch' } },\n      failed: { on: { CLOSE: 'closed', BREAK: 'broken', STOP: 'stopped', SWITCH: 'switch' } },\n      switch: { on: { CLOSE: 'closed', BREAK: 'broken', STOP: 'stopped' } },\n      stopped: { on: { NEW: 'new', STOP: 'stopped' } }\n    }\n  })\n}\n\nde.biancoroyal.modbus.core.client.getActualUnitId = function (node, msg) {\n  if (msg.payload && Number.isInteger(msg.payload.unitid)) {\n    return parseInt(msg.payload.unitid)\n  } else if (Number.isInteger(msg.queueUnitId)) {\n    return parseInt(msg.queueUnitId)\n  } else {\n    return parseInt(node.unit_id)\n  }\n}\n\nde.biancoroyal.modbus.core.client.startStateService = function (toggleMachine) {\n  return this.XStateFSM.interpret(toggleMachine).start()\n}\n\nde.biancoroyal.modbus.core.client.checkUnitId = function (unitid, clientType) {\n  if (clientType === 'tcp') {\n    return unitid >= 0 && unitid <= 255\n  } else {\n    return unitid >= 0 && unitid <= 247\n  }\n}\n\nde.biancoroyal.modbus.core.client.getLogFunction = function (node) {\n  if (node.internalDebugLog) {\n    return node.internalDebugLog\n  } else {\n    return de.biancoroyal.modbus.core.client.internalDebug\n  }\n}\n\nde.biancoroyal.modbus.core.client.activateSendingOnSuccess = function (node, cb, cberr, resp, msg) {\n  node.activateSending(msg).then(function () {\n    cb(resp, msg)\n  }).catch(function (err) {\n    cberr(err, msg)\n  }).finally(function () {\n    node.stateService.send('ACTIVATE')\n  })\n}\n\nde.biancoroyal.modbus.core.client.activateSendingOnFailure = function (node, cberr, err, msg) {\n  node.activateSending(msg).then(function () {\n    cberr(err, msg)\n  }).catch(function (err) {\n    cberr(err, msg)\n  }).finally(function () {\n    node.stateService.send('ACTIVATE')\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeOne = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readCoils(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, err, msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeTwo = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readDiscreteInputs(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, err, msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeThree = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readHoldingRegisters(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, err, msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeFour = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readInputRegisters(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, err, msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCode = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n\n  switch (parseInt(msg.payload.fc)) {\n    case 1:\n      coreClient.readModbusByFunctionCodeOne(node, msg, cb, cberr)\n      break\n    case 2:\n      coreClient.readModbusByFunctionCodeTwo(node, msg, cb, cberr)\n      break\n    case 3:\n      coreClient.readModbusByFunctionCodeThree(node, msg, cb, cberr)\n      break\n    case 4:\n      coreClient.readModbusByFunctionCodeFour(node, msg, cb, cberr)\n      break\n    default:\n      coreClient.activateSendingOnFailure(node, cberr, new Error('Function Code Unknown'), msg)\n      nodeLog('Function Code Unknown %s', msg.payload.fc)\n      break\n  }\n}\n\nde.biancoroyal.modbus.core.client.readModbus = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n\n  if (!node.client) {\n    nodeLog('Client Not Ready As Object On Reading Modbus')\n    return\n  }\n\n  if (!node.bufferCommands) {\n    if (node.clienttype !== 'tcp') {\n      node.stateService.send('READ')\n    }\n  } else {\n    node.queueLog(JSON.stringify({\n      info: 'read msg via Modbus',\n      message: msg.payload,\n      queueUnitId: msg.queueUnitId,\n      timeout: node.client.getTimeout(),\n      state: node.actualServiceState.value\n    }))\n  }\n\n  node.setUnitIdFromPayload(msg)\n  node.client.setTimeout(node.clientTimeout)\n\n  try {\n    coreClient.readModbusByFunctionCode(node, msg, cb, cberr)\n  } catch (err) {\n    nodeLog(err.message)\n    node.modbusErrorHandling(err)\n    coreClient.activateSendingOnFailure(node, cberr, err, msg)\n  }\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeFive = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  if (msg.payload.value) {\n    msg.payload.value = true\n  } else {\n    msg.payload.value = false\n  }\n  node.client.writeCoil(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    if (node.client.getID() === 0) {\n      const resp = {\n        address: parseInt(msg.payload.address),\n        value: parseInt(msg.payload.value)\n      }\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    } else {\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\n      node.modbusErrorHandling(err)\n    }\n  })\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeFifteen = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  if (parseInt(msg.payload.value.length) !== parseInt(msg.payload.quantity)) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error('Quantity should be less or equal to coil payload array length: ' +\n      msg.payload.value.length + ' Addr: ' + msg.payload.address + ' Q: ' + msg.payload.quantity), msg)\n  } else {\n    node.client.writeCoils(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    }).catch(function (err) {\n      if (node.client.getID() === 0) {\n        const resp = {\n          address: parseInt(msg.payload.address),\n          value: parseInt(msg.payload.value)\n        }\n        coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n      } else {\n        coreClient.activateSendingOnFailure(node, cberr, err, msg)\n        node.modbusErrorHandling(err)\n      }\n    })\n  }\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeSix = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.writeRegister(parseInt(msg.payload.address), parseInt(msg.payload.value)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    if (node.client.getID() === 0) {\n      const resp = {\n        address: parseInt(msg.payload.address),\n        value: parseInt(msg.payload.value)\n      }\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    } else {\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\n      node.modbusErrorHandling(err)\n    }\n  })\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeSixteen = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  if (parseInt(msg.payload.value.length) !== parseInt(msg.payload.quantity)) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error('Quantity should be less or equal to register payload array length: ' +\n      msg.payload.value.length + ' Addr: ' + msg.payload.address + ' Q: ' + msg.payload.quantity), msg)\n  } else {\n    node.client.writeRegisters(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    }).catch(function (err) {\n      if (node.client.getID() === 0) {\n        const resp = {\n          address: parseInt(msg.payload.address),\n          value: parseInt(msg.payload.value)\n        }\n        coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n      } else {\n        coreClient.activateSendingOnFailure(node, cberr, err, msg)\n        node.modbusErrorHandling(err)\n      }\n    })\n  }\n}\n\nde.biancoroyal.modbus.core.client.writeModbus = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n\n  if (!node.client) {\n    nodeLog('Client Not Ready As Object On Writing Modbus')\n    return\n  }\n\n  if (!node.bufferCommands) {\n    if (node.clienttype !== 'tcp') {\n      node.stateService.send('WRITE')\n    }\n  } else {\n    node.queueLog(JSON.stringify({\n      info: 'write msg',\n      message: msg.payload,\n      queueUnitId: msg.queueUnitId,\n      timeout: node.client.getTimeout(),\n      state: node.actualServiceState.value\n    }))\n  }\n\n  node.setUnitIdFromPayload(msg)\n  node.client.setTimeout(node.clientTimeout)\n\n  try {\n    switch (parseInt(msg.payload.fc)) {\n      case 15: // FC: 15\n        coreClient.writeModbusByFunctionCodeFifteen(node, msg, cb, cberr)\n        break\n      case 5: // FC: 5\n        coreClient.writeModbusByFunctionCodeFive(node, msg, cb, cberr)\n        break\n      case 16: // FC: 16\n        coreClient.writeModbusByFunctionCodeSixteen(node, msg, cb, cberr)\n        break\n      case 6: // FC: 6\n        coreClient.writeModbusByFunctionCodeSix(node, msg, cb, cberr)\n        break\n      default:\n        coreClient.activateSendingOnFailure(node, cberr, new Error('Function Code Unknown'), msg)\n        nodeLog('Function Code Unknown %s', msg.payload.fc)\n        break\n    }\n  } catch (err) {\n    nodeLog(err.message)\n    coreClient.activateSendingOnFailure(node, cberr, err, msg)\n    node.modbusErrorHandling(err)\n  }\n}\n\nde.biancoroyal.modbus.core.client.setNewTCPNodeSettings = function (node, msg) {\n  node.tcpHost = msg.payload.tcpHost || node.tcpHost\n  node.tcpPort = msg.payload.tcpPort || node.tcpPort\n  node.tcpType = msg.payload.tcpType || node.tcpType\n}\n\nde.biancoroyal.modbus.core.client.setNewSerialNodeSettings = function (node, msg) {\n  if (msg.payload.serialPort) {\n    node.serialPort = msg.payload.serialPort || node.serialPort\n  }\n\n  if (msg.payload.serialBaudrate) {\n    node.serialBaudrate = parseInt(msg.payload.serialBaudrate) || node.serialBaudrate\n  }\n\n  node.serialDatabits = msg.payload.serialDatabits || node.serialDatabits\n  node.serialStopbits = msg.payload.serialStopbits || node.serialStopbits\n  node.serialParity = msg.payload.serialParity || node.serialParity\n  node.serialType = msg.payload.serialType || node.serialType\n\n  if (msg.payload.serialConnectionDelay) {\n    node.serialConnectionDelay = parseInt(msg.payload.serialConnectionDelay) || node.serialConnectionDelay\n  }\n}\n\nde.biancoroyal.modbus.core.client.setNewNodeOptionalSettings = function (node, msg) {\n  if (msg.payload.unitId) {\n    node.unit_id = parseInt(msg.payload.unitId) || node.unit_id\n  }\n\n  if (msg.payload.commandDelay) {\n    node.commandDelay = parseInt(msg.payload.commandDelay) || node.commandDelay\n  }\n\n  if (msg.payload.clientTimeout) {\n    node.clientTimeout = parseInt(msg.payload.clientTimeout) || node.clientTimeout\n  }\n\n  if (msg.payload.reconnectTimeout) {\n    node.reconnectTimeout = parseInt(msg.payload.reconnectTimeout) || node.reconnectTimeout\n  }\n}\n\nde.biancoroyal.modbus.core.client.setNewNodeSettings = function (node, msg) {\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n  const coreClient = de.biancoroyal.modbus.core.client\n\n  if (!msg) {\n    nodeLog('New Connection message invalid.')\n    return false\n  }\n\n  switch (msg.payload.connectorType.toUpperCase()) {\n    case 'TCP':\n      coreClient.setNewTCPNodeSettings(node, msg)\n      nodeLog('New Connection TCP Settings ' + node.tcpHost + ' ' + node.tcpPort + ' ' + node.tcpType)\n      break\n\n    case 'SERIAL':\n      coreClient.setNewSerialNodeSettings(node, msg)\n      nodeLog('New Connection Serial Settings ' + node.serialPort + ' ' + node.serialBaudrate + ' ' + node.serialType)\n      break\n\n    default:\n      nodeLog('Unknown Dynamic Reconnect Type ' + msg.payload.connectorType)\n  }\n\n  coreClient.setNewNodeOptionalSettings(node, msg)\n\n  return true\n}\n\nde.biancoroyal.modbus.core.client.messagesAllowedStates = ['activated', 'queueing', 'sending', 'empty', 'connected']\n\nmodule.exports = de.biancoroyal.modbus.core.client\n"]}