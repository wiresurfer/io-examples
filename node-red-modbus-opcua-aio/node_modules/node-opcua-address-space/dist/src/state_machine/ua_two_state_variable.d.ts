import { LocalizedText, LocalizedTextLike } from "node-opcua-data-model";
import { NodeId } from "node-opcua-nodeid";
import { VariantLike } from "node-opcua-variant";
import { DataType } from "node-opcua-variant";
import { AddTwoStateVariableOptions, BaseNode as BaseNodePublic, BindVariableOptions, Namespace, UAVariable as UAVariablePublic, UAVariableT } from "../../source";
import { UATwoStateVariable as UATwoStateVariablePublic } from "../../source/interfaces/state_machine/ua_two_state_variable";
import { UAStateVariable as UAStateVariablePublic } from "../../source/interfaces/state_machine/ua_state_variable";
import { Reference } from "../reference";
import { UAVariable } from "../ua_variable";
export declare function _install_TwoStateVariable_machinery(node: UAVariablePublic, options: TwoStateVariableInitializeOptions): UATwoStateVariable;
export declare function promoteToTwoStateVariable(node: UAVariablePublic): UATwoStateVariablePublic;
export interface UATwoStateVariable {
    readonly id: UAVariableT<boolean, DataType.Boolean>;
    readonly falseState?: UAVariableT<LocalizedText, DataType.LocalizedText>;
    readonly trueState?: UAVariableT<LocalizedText, DataType.LocalizedText>;
    readonly effectiveTransitionTime?: UAVariableT<Date, DataType.DateTime>;
    readonly transitionTime?: UAVariableT<Date, DataType.DateTime>;
    readonly effectiveDisplayName?: UAVariableT<LocalizedText, DataType.LocalizedText>;
}
export interface TwoStateVariableInitializeOptions {
    trueState?: LocalizedTextLike;
    falseState?: LocalizedTextLike;
    isFalseSubStateOf?: NodeId | string | BaseNodePublic;
    isTrueSubStateOf?: NodeId | string | BaseNodePublic;
    value?: boolean | VariantLike | BindVariableOptions;
}
/***
 * @class UATwoStateVariable
 * @constructor
 * @extends UAVariable
 */
export declare class UATwoStateVariable extends UAVariable implements UAStateVariablePublic {
    private _trueState?;
    private _falseState?;
    constructor(opts: any);
    get isFalseSubStateOf(): UAStateVariablePublic;
    get isTrueSubStateOf(): UAStateVariablePublic;
    initialize(options: TwoStateVariableInitializeOptions): void;
    _postInitialize(): void;
    /**
     * @method setValue
     * @param boolValue {Boolean}
     */
    setValue(boolValue: boolean): void;
    /**
     * @method getValue
     * @return {Boolean}
     */
    getValue(): boolean;
    /**
     * @method getValueAsString
     * @return {string}
     */
    getValueAsString(): string;
    getTrueState(): LocalizedText;
    getFalseState(): LocalizedText;
    protected _add_backward_reference(reference: Reference): void;
}
export declare function _addTwoStateVariable(namespace: Namespace, options: AddTwoStateVariableOptions): UATwoStateVariablePublic;
